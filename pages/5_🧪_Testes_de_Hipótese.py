import streamlit as st
import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns

# Carregamento de dados (mesma fun√ß√£o cache das outras p√°ginas)
@st.cache_data
def load_data():
    df = pd.read_excel("df_selecionado.xlsx")
    df['Data_Pedido'] = pd.to_datetime(df['Data_Pedido'], errors='coerce')
    return df

df = load_data()

# T√≠tulo e introdu√ß√£o
st.title("üß™ Parte 2: Testes de Hip√≥tese")
st.markdown("---")
st.markdown("""
### Objetivos
Nesta se√ß√£o, vamos responder duas perguntas-chave:

1. **Ticket M√©dio:** Ser√° que certas categorias de produtos (por exemplo, Eletr√¥nicos vs Roupas) t√™m pre√ßos m√©dios diferentes?   
   _Insight_: entender onde est√° o maior valor agregado.

2. **Cancelamentos x Envio:** O m√©todo de envio (Padr√£o vs Expresso) influencia na taxa de cancelamentos?   
   _Insight_: avaliar se oferecer frete expresso reduz desist√™ncias.

Para cada pergunta, formulamos hip√≥teses, calculamos uma estat√≠stica e um p‚Äëvalor, e interpretamos o resultado de forma simples.
""")
st.markdown("---")

# Sidebar: filtros b√°sicos
with st.sidebar:
    st.header("üîß Filtros Gerais")
    date_range = st.date_input("Per√≠odo", [df['Data_Pedido'].min(), df['Data_Pedido'].max()])
    df = df[(df['Data_Pedido'] >= pd.to_datetime(date_range[0])) & (df['Data_Pedido'] <= pd.to_datetime(date_range[1]))]

# -----------------------------
# Teste 1: Two-sample t-test
# -----------------------------
st.header("1. t‚Äëtest: Ticket M√©dio entre Categorias")
st.markdown("Queremos saber se existe diferen√ßa no valor m√©dio dos pedidos entre duas categorias de produtos.")

# Sele√ß√£o din√¢mica de categorias para compara√ß√£o
disponiveis = df['Categoria'].dropna().unique().tolist()
if len(disponiveis) < 2:
    st.warning("N√£o h√° categorias suficientes para realizar o t-test.")
else:
    colA, colB = st.columns(2)
    with colA:
        cat1 = st.selectbox("Categoria A", disponiveis, index=0)
    with colB:
        cat2 = st.selectbox("Categoria B", [c for c in disponiveis if c != cat1], index=0)

    sample1 = df[df['Categoria'] == cat1]['Valor_Pedido'].dropna()
    sample2 = df[df['Categoria'] == cat2]['Valor_Pedido'].dropna()

    if len(sample1) < 2 or len(sample2) < 2:
        st.warning("Amostras pequenas (menos de 2 observa√ß√µes) em uma das categorias, n√£o √© poss√≠vel realizar o t-test.")
    else:
        with st.expander("üìù Hip√≥teses", expanded=True):
            st.markdown(f"""
            - **H‚ÇÄ (nula):** O ticket m√©dio de **{cat1}** √© igual ao de **{cat2}**.  
            - **H‚ÇÅ (alternativa):** O ticket m√©dio de **{cat1}** √© diferente do de **{cat2}**.
            """)

        # C√°lculo do t‚Äëtest (Welch, vari√¢ncias desiguais)
        t_stat, p_val = stats.ttest_ind(sample1, sample2, equal_var=False)
        # graus de liberdade aproximado de Welch
        df_num = (sample1.var(ddof=1)/len(sample1) + sample2.var(ddof=1)/len(sample2))**2
        t_stat, p_val = stats.ttest_ind(sample1, sample2, equal_var=False)
        # graus de liberdade aproximado de Welch\        df_num = (sample1.var(ddof=1)/len(sample1) + sample2.var(ddof=1)/len(sample2))**2
        df_den = ((sample1.var(ddof=1)/len(sample1))**2)/(len(sample1)-1) + ((sample2.var(ddof=1)/len(sample2))**2)/(len(sample2)-1)
        gl = df_num/df_den

        # Exibir resultados num√©ricos
        col1, col2, col3 = st.columns(3)
        col1.metric("t-Statistic", f"{t_stat:.3f}")
        col2.metric("p-valor", f"{p_val:.3f}")
        col3.metric("Grau de liberdade (aprox.)", f"{gl:.0f}")

        # Explica√ß√£o simplificada, incluindo gl
        st.markdown("""
        **O que √© o t-Statistic?**  
        Quantifica em unidades de erro padr√£o a diferen√ßa entre m√©dias.  
        
        **O que √© grau de liberdade?**  
        Indica quantos valores independentes sustentam a estimativa de vari√¢ncia; afeta a forma da curva t.  
        - Maior gl ‚Üí curva t mais pr√≥xima da normal.  
        
        **Como usar o p-valor?**  
        - Se p-valor ‚â§ 0.05, **rejeitamos H‚ÇÄ** (diferen√ßa significativa).  
        - Se p-valor > 0.05, **n√£o rejeitamos H‚ÇÄ** (diferen√ßa n√£o comprovada).  
        - P-valor = 0 indica evid√™ncia extremamente forte contra H‚ÇÄ.

        **Tomada de Decis√£o:**  
        - ‚úÖ **p ‚â§ 0.05**: H√° diferen√ßa real!  
          _A√ß√£o:_ Investir mais na categoria com maior ticket.  
        - ‚ö†Ô∏è **p > 0.05**: Diferen√ßa pode ser acaso  
          _A√ß√£o:_ Analisar outros fatores.
        """)

        # Boxplot com anota√ß√£o de m√©dias fora das caixas
        st.subheader("üì¶ Boxplot de Valor_Pedido por Categoria")
        fig, ax = plt.subplots()
        sns.boxplot(x='Categoria', y='Valor_Pedido', data=df[df['Categoria'].isin([cat1, cat2])], ax=ax)
        # Anotar m√©dias acima das caixas
        for i, m in enumerate([sample1.mean(), sample2.mean()]):
            ax.text(i, m + 0.05*(df['Valor_Pedido'].max()-df['Valor_Pedido'].min()), f"M√©dia: R$ {m:.2f}", ha='center', va='bottom', color='black')
        ax.set_title(f'Compara√ß√£o de Ticket M√©dio: {cat1} vs {cat2}')
        st.pyplot(fig)

        # Interpreta√ß√£o e liga√ß√£o com o neg√≥cio
        alpha = 0.05
        if p_val <= alpha:
            conclus√£o = f"**Rejeitamos H‚ÇÄ** (p‚â§{alpha}): h√° diferen√ßa significativa no ticket m√©dio entre {cat1} e {cat2}."
            a√ß√£o = f"üí° Conclus√£o de neg√≥cio: recomenda-se estrat√©gias de pre√ßo diferenciadas para {cat1 if sample1.mean()>sample2.mean() else cat2}."
        else:
            conclus√£o = f"**N√£o rejeitamos H‚ÇÄ** (p>{alpha}): n√£o h√° evid√™ncia de diferen√ßa significativa no ticket m√©dio entre {cat1} e {cat2}."
            a√ß√£o = f"üí° Conclus√£o de neg√≥cio: m√©dias similares; investigar fatores adicionais antes de mudar pre√ßos."
        st.markdown(conclus√£o)
        st.markdown(a√ß√£o)

st.markdown("---")

# ---------------------------------------------
# Teste 2: Qui-quadrado de independ√™ncia
# ---------------------------------------------
st.header("2. Qui‚ÄëQuadrado: Cancelamento x N√≠vel de Entrega")
st.markdown("Queremos verificar se o tipo de frete influencia a decis√£o de cancelar pedidos.")

contingency = pd.crosstab(df['Nivel_Entrega'], df['Status_Pedido'])
if contingency.shape[0] < 2 or contingency.shape[1] < 2:
    st.warning("Dados insuficientes para o teste qui-quadrado.")
else:
    with st.expander("üìù Hip√≥teses", expanded=True):
        st.markdown("""
        - **H‚ÇÄ (nula):** O status do pedido (Cancelado/Enviado) √© **independente** do n√≠vel de entrega.  
        - **H‚ÇÅ (alternativa):** H√° **rela√ß√£o** entre status do pedido e n√≠vel de entrega.
        """)

    chi2, p_chi, dof, expected = stats.chi2_contingency(contingency)

    col1, col2, col3 = st.columns(3)
    col1.metric("Chi2", f"{chi2:.3f}")
    col2.metric("p-valor", f"{p_chi:.3f}")
    col3.metric("Grau de liberdade", f"{dof}")

    # Mostrar tabela observada vs esperada
    with st.expander("üî¢ Observado vs Esperado", expanded=False):
        st.markdown("**Objetivo:** Ver onde ocorrem os maiores desvios da independ√™ncia esperado vs real.")
        obs = contingency
        exp_df = pd.DataFrame(expected, index=contingency.index, columns=contingency.columns)
        st.write("**Observado**")
        st.dataframe(obs)
        st.write("**Esperado**")
        st.dataframe(exp_df)

    st.markdown("""
    **O que √© o Chi‚Äësquare?**  
    Mede o quanto a distribui√ß√£o observada difere da esperada sob independ√™ncia.  
    - üìä **Chi2 alto** indica forte padr√£o de cancelamento diferenciado.  

    **Por que mostramos Observado vs Esperado?**  
    - Para identificar quais combina√ß√µes (frete x status) mais contribuem para o desvio.  
    - Linhas com maior diferen√ßa mostram pontos cr√≠ticos de aten√ß√£o.

    **Como usar o p‚Äëvalor?**  
    - Se p‚Äëvalor ‚â§ 0.05, **rejeitamos H‚ÇÄ**: existe rela√ß√£o entre frete e cancelamento.  
    - Se p‚Äëvalor > 0.05, **n√£o rejeitamos H‚ÇÄ**: sem evid√™ncia de rela√ß√£o.
    """)

    # Gr√°fico de propor√ß√£o ajustado
    st.subheader("üìä Propor√ß√£o de Status por N√≠vel de Entrega")
    # Agrupar status menos frequentes em 'Outros' para visualiza√ß√£o clara
    status_counts = df['Status_Pedido'].value_counts()
    top_status = status_counts.nlargest(3).index.tolist()
    # Remap df for plotting
    df_plot = df.copy()
    df_plot['Status_Agrupado'] = df_plot['Status_Pedido'].where(df_plot['Status_Pedido'].isin(top_status), other='Outros')
    prop = pd.crosstab(df_plot['Nivel_Entrega'], df_plot['Status_Agrupado']).div(
        pd.crosstab(df_plot['Nivel_Entrega'], df_plot['Status_Agrupado']).sum(axis=1), axis=0
    )

    fig, ax = plt.subplots(figsize=(8, 4))
    prop.plot(kind='bar', stacked=True, ax=ax)
    ax.set_ylabel('Propor√ß√£o')
    ax.set_title('Cancelamento vs N√≠vel de Entrega')
    ax.legend(title='Status_Pedido', bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0)
    plt.tight_layout()
    # Anotar percentuais corretos
    for container in ax.containers:
        for bar in container:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_y() + height/2,
                    f"{height*100:.1f}%", ha='center', va='center')
    st.pyplot(fig)

    # Interpreta√ß√£o e liga√ß√£o com o neg√≥cio
    alpha = 0.05
    if p_chi <= alpha:
        concl_chi = f"**Rejeitamos H‚ÇÄ** (p‚â§{alpha}): h√° associa√ß√£o significativa entre n√≠vel de entrega e cancelamento."
        a√ß√£o_chi = "üí° Conclus√£o de neg√≥cio: o tipo de frete impacta diretamente a taxa de cancelamento; recomendamos revisar processos de frete expresso (prazo, custo) para reduzir desist√™ncias."
    else:
        concl_chi = f"**N√£o rejeitamos H‚ÇÄ** (p>{alpha}): n√£o h√° evid√™ncia de associa√ß√£o entre n√≠vel de entrega e cancelamento."
        a√ß√£o_chi = "üí° Conclus√£o de neg√≥cio: o frete n√£o parece influenciar cancelamentos; investigar outras causas."
    st.markdown(concl_chi)
    st.markdown(a√ß√£o_chi)

st.success("‚ú® Testes conclu√≠dos! Use estes resultados para apoiar decis√µes de pre√ßo e log√≠stica.")
